import java.io.*;
import java.text.Normalizer.Form;
import java.util.ArrayList;

public class TinyParse {

	static int pointer = -1;
	static ArrayList tokens = new ArrayList();

	public TinyParse() {
		super();
	}

	public static void main(String[] args) throws Exception {
		// construct the token array
		// note that yylex() is the default method to get the next token in scanner that
		// is generated by JLlex.
		Scanner scanner = null;
		try {
			scanner = new Scanner(new FileInputStream(new File(args[0])));
		} catch (Exception e) {
			System.out.println("Incorrect usage : Java TinyParse [filename]");
			System.exit(0);
		}
		Symbol token;
		while ((token = scanner.yylex()).sym != SymbolTable.EOF) {
			tokens.add(token);
		}
		tokens.add(token); // add EOF as the last token in the array
		boolean legal = MethodDecls() && nextToken().sym == SymbolTable.EOF;
		System.out.println();
		System.out.println((legal) ? "*****Program is Legal*****" : "*****Program is Illegal*****");
		System.out.println();
	}


	/**
	 * MethodDecls --> MethodDecl MethodDecls
	 * MethodDecls --> MethodDecl
	 */
	static boolean MethodDecls() throws Exception {
		int savePointer = pointer;

		if (MethodDecl() && MethodDecls()) {
			System.out.println("Parsing Token " + tokens.get(pointer).toString() + " :\tMethodDecls --> MethodDecl MethodDecls");
			return true;
		}
		pointer = savePointer;
		if (MethodDecl()) {
			System.out.println("Parsing Token " + tokens.get(pointer).toString() + " :\tMethodDecls --> MethodDecl");
			return true;
		}
		pointer = savePointer;
		return false;

	}

	/**
	 * MethodDecl --> TYPE ID (FormalParams) Block
	 * MethodDecl --> TYPE MAIN ID (FormalParams) Block
	 * MethodDecl --> TYPE ID () Block
	 * MethodDecl --> TYPE MAIN ID () Block
	 */
	static boolean MethodDecl() throws Exception {
		int savePointer = pointer;
		if (nextToken().sym == SymbolTable.TYPE && nextToken().sym == SymbolTable.ID && nextToken().sym == SymbolTable.LPAREN
				&& FormalParams() && nextToken().sym == SymbolTable.RPAREN && Block()) {
			System.out.println("Parsing Token " + tokens.get(pointer).toString() + " :\tMethodDecl --> TYPE ID (FormalParams) Block");
			return true;
		}
		pointer = savePointer;
		if (nextToken().sym == SymbolTable.TYPE && nextToken().sym == SymbolTable.MAIN && nextToken().sym == SymbolTable.ID
				&& nextToken().sym == SymbolTable.LPAREN && FormalParams() && nextToken().sym == SymbolTable.RPAREN && Block()) {
					System.out.println("Parsing Token " + tokens.get(pointer).toString() + " :\tTYPE MAIN ID (FormalParams) Block");
					return true;
		}
		pointer = savePointer;
		if (nextToken().sym == SymbolTable.TYPE && nextToken().sym == SymbolTable.ID && nextToken().sym == SymbolTable.LPAREN
				&& nextToken().sym == SymbolTable.RPAREN && Block()) {
					System.out.println("Parsing Token " + tokens.get(pointer).toString() + " :\tMethodDecl --> TYPE ID () Block");
					return true;
		}
		pointer = savePointer;
		if (nextToken().sym == SymbolTable.TYPE && nextToken().sym == SymbolTable.MAIN && nextToken().sym == SymbolTable.ID
				&& nextToken().sym == SymbolTable.LPAREN && nextToken().sym == SymbolTable.RPAREN && Block()) {
					System.out.println("Parsing Token " + tokens.get(pointer).toString() + " :\tMethodDecl --> TYPE MAIN ID () Block");
					return true;
		}
		pointer = savePointer;
		return false;
	}

	/**
	 * FormalParams --> FormalParam , FormalParams
	 * FormalParams --> FormalParam
	 */
	static boolean FormalParams() throws Exception {
		int savePointer = pointer;

		if (FormalParam() && nextToken().sym == SymbolTable.COMMA && FormalParams()) {
			System.out.println("Parsing Token " + tokens.get(pointer).toString() + " :\tFormalParams --> FormalParam , FormalParams");
			return true;
		}
		pointer = savePointer;
		if (FormalParam()) {
			System.out.println("Parsing Token " + tokens.get(pointer).toString() + " :\tFormalParams --> FormalParam");
			return true;
		}
		pointer = savePointer;
		return false;
	}

	/**
	 * FormalParam --> TYPE ID
	 */
	static boolean FormalParam() throws Exception {
		int savePointer = pointer;

		if (nextToken().sym == SymbolTable.TYPE && nextToken().sym == SymbolTable.ID) {
			System.out.println("Parsing Token " + tokens.get(pointer).toString() + " :\tFormalParam --> TYPE ID");
			return true;
		}
		pointer = savePointer;
		return false;
	}

	/**
	 * Block --> BEGIN Statements END
	 */
	static boolean Block() throws Exception {
		int savePointer = pointer;

		if (nextToken().sym == SymbolTable.BEGIN && Statements() && nextToken().sym == SymbolTable.END) {
			System.out.println("Parsing Token " + tokens.get(pointer).toString() + " :\tBlock --> BEGIN Statements END");
			return true;
		}
		pointer = savePointer;
		return false;
	}

	/**
	 * Statements --> Statement Statements
	 * Statements --> Statement
	 */
	static boolean Statements() throws Exception {
		int savePointer = pointer;

		if (Statement() && Statements()) {
			System.out.println("Parsing Token " + tokens.get(pointer).toString() + " :\tStatements --> Statement Statements");
			return true;
		}
		pointer = savePointer;
		if (Statement()) {
			System.out.println("Parsing Token " + tokens.get(pointer).toString() + " :\tStatements --> Statement");
			return true;
		}
		pointer = savePointer;
		return false;
	}

	/**
	 * Statement --> Block
	 * Statement --> LocalVarDecl
	 * Statement --> AssingStmt
	 * Statement --> ReturnStmt
	 * Statement --> WriteStmt
	 * Statement --> ReadStmt
	 * Statement --> ifStmt
	 */
	static boolean Statement() throws Exception {
		int savePointer = pointer;

		if (Block()) {
			System.out.println("Parsing Token " + tokens.get(pointer).toString() + " :\tStatement --> Block");
			return true;
		}
		pointer = savePointer;
		if (LocalVarDecl()) {
			System.out.println("Parsing Token " + tokens.get(pointer).toString() + " :\tStatement --> LocalVarDecl");
			return true;
		}
		pointer = savePointer;
		if (AssignStmt()) {
			System.out.println("Parsing Token " + tokens.get(pointer).toString() + " :\tStatement --> AssignStmt");
			return true;
		}
		pointer = savePointer;
		if (ReturnStmt()) {
			System.out.println("Parsing Token " + tokens.get(pointer).toString() + " :\tStatement --> ReturnStmt");
			return true;
		}
		pointer = savePointer;
		if (WriteStmt()) {
			System.out.println("Parsing Token " + tokens.get(pointer).toString() + " :\tStatement --> WriteStmt");
			return true;
		}
		pointer = savePointer;
		if (ReadStmt()) {
			System.out.println("Parsing Token " + tokens.get(pointer).toString() + " :\tStatement --> ReadStmt");
			return true;
		}
		pointer = savePointer;
		if (ifStmt()) {
			System.out.println("Parsing Token " + tokens.get(pointer).toString() + " :\tStatement --> ifStmt");
			return true;
		}
		pointer = savePointer;
		return false;
	}

	/**
	 * WriteStmt --> WRITE (Expression, Qstring);
	 */
	static boolean WriteStmt() throws Exception{
		int savePointer = pointer;
		if (nextToken().sym == SymbolTable.WRITE
		&& nextToken().sym == SymbolTable.LPAREN
		&& Expression()
		&& nextToken().sym == SymbolTable.COMMA
		&& nextToken().sym == SymbolTable.QString
		&& nextToken().sym == SymbolTable.RPAREN
		&& nextToken().sym == SymbolTable.SEMICOLON) {
			System.out.println("Parsing Token " + tokens.get(pointer).toString() + " :\tWriteStmt --> WRITE (Expression, Qstring);");
			return true;
		}
		return false;
	}

	/**
	 * ReadStmt --> READ (ID, QString);
	 */
	static boolean ReadStmt() throws Exception{
		int savePointer = pointer;
		if (nextToken().sym == SymbolTable.READ
		&& nextToken().sym == SymbolTable.LPAREN
		&& nextToken().sym == SymbolTable.ID
		&& nextToken().sym == SymbolTable.COMMA
		&& nextToken().sym == SymbolTable.QString
		&& nextToken().sym == SymbolTable.RPAREN
		&& nextToken().sym == SymbolTable.SEMICOLON) {
			System.out.println("Parsing Token " + tokens.get(pointer).toString() + " :\tReadStmt --> READ (ID, QString);");
			return true;
		}
		return false;
	}

	/**
	 * AssignStmt --> ID = Expression
	 * AssignStmt --> ID = QString
	 */
	static boolean AssignStmt() throws Exception {
		int savePointer = pointer;
		if (nextToken().sym == SymbolTable.ID && nextToken().sym == SymbolTable.EQUALS && Expression()
				&& nextToken().sym == SymbolTable.SEMICOLON) {
					System.out.println("Parsing Token " + tokens.get(pointer).toString() + " :\tAssignStmt --> ID = Expression");
					return true;
		}
		pointer = savePointer;
		if (nextToken().sym == SymbolTable.ID && nextToken().sym == SymbolTable.EQUALS && nextToken().sym == SymbolTable.QString
				&& nextToken().sym == SymbolTable.SEMICOLON) {
					System.out.println("Parsing Token " + tokens.get(pointer).toString() + " :\tAssignStmt --> ID = QString");
			return true;
		}
		pointer = savePointer;
		return false;
	}

	/**
	 * Expression --> term + Expression
	 * Expression --> term - Expression
	 * Expression --> term
	 */
	static boolean Expression() throws Exception {
		int savePointer = pointer;
		if (term() && nextToken().sym == SymbolTable.PLUS && Expression()) {
			System.out.println("Parsing Token " + tokens.get(pointer).toString() + " :\tExpression --> term + Expression");
			return true;
		}
		pointer = savePointer;
		if (term() && nextToken().sym == SymbolTable.MINUS && Expression()) {
			System.out.println("Parsing Token " + tokens.get(pointer).toString() + " :\tExpression --> term - Expression");
			return true;
		}
		pointer = savePointer;
		if (term()) {
			System.out.println("Parsing Token " + tokens.get(pointer).toString() + " :\tExpression --> term");
			return true;
		}
		pointer = savePointer;
		return false;
	}

	/**
	 * exprList --> ActualParams
	 */
	static boolean exprList() throws Exception {
		int savedPointer = pointer;
		if (ActualParams()){
			System.out.println("Parsing Token " + tokens.get(pointer).toString() + " :\texprList --> ActualParams");
			return true;
		}
		pointer = savedPointer;
		return true;
	}

	/**
	 * factor --> functionCall
	 * factor --> ID | DIGIT
	 * factor --> (Expression)
	 */
	static boolean factor() throws Exception {
		int savePointer = pointer;
		if (functionCall()) {
			System.out.println("Parsing Token " + tokens.get(pointer).toString() + " :\tfactor --> functionCall");
			return true;
		}
		pointer = savePointer;
		int sym = nextToken().sym;
		if (sym == SymbolTable.ID || sym == SymbolTable.NUMBER) {
			System.out.println("Parsing Token " + tokens.get(pointer).toString() + " :\tfactor --> ID | DIGIT");
			return true;
		}
		pointer = savePointer;
		if (nextToken().sym == SymbolTable.LPAREN && Expression() && nextToken().sym == SymbolTable.RPAREN){
			System.out.println("Parsing Token " + tokens.get(pointer).toString() + " :\tfactor --> (Expression)");
			return true;
		}
		pointer = savePointer;
		return false;
	}

	/**
	 * functionCall --> ID(exprList)
	 */
	static boolean functionCall() throws Exception {
		int savePointer = pointer;
		if (nextToken().sym == SymbolTable.ID && nextToken().sym == SymbolTable.LPAREN && exprList()
				&& nextToken().sym == SymbolTable.RPAREN){
				System.out.println("Parsing Token " + tokens.get(pointer).toString() + " :\tfunctionCall --> ID(exprList)");
				return true;
			}
		pointer = savePointer;
		return false;
	}

	/**
	 * term --> factor * term 
	 * term --> factor / term 
	 * term --> factor
	 */
	static boolean term() throws Exception {
		int savePointer = pointer;
		if (factor() && nextToken().sym == SymbolTable.TIMES && term()) {
			System.out.println("Parsing Token " + tokens.get(pointer).toString() + " :\tterm --> factor * term");
			return true;
		}
		pointer = savePointer;
		if (factor() && nextToken().sym == SymbolTable.DIVIDE && term()) {
			System.out.println("Parsing Token " + tokens.get(pointer).toString() + " :\tterm --> factor / term");
			return true;
		}
		pointer = savePointer;
		if (factor()) {
			System.out.println("Parsing Token " + tokens.get(pointer).toString() + " :\tterm --> factor");
			return true;
		}
		pointer = savePointer;
		return false;
	}

	/**
	 * ActualParams --> Expression, ActualParams
	 * ActualParams --> Expression
	 */
	static boolean ActualParams() throws Exception {
		int savePointer = pointer;
		if (Expression() && nextToken().sym == SymbolTable.COMMA && ActualParams()) {
			System.out.println("Parsing Token " + tokens.get(pointer).toString() + " :\tActualParams --> Expression, ActualParams");
			return true;
		}
		pointer = savePointer;
		if (Expression()) {
			System.out.println("Parsing Token " + tokens.get(pointer).toString() + " :\tActualParams --> Expression");
			return true;
		}
		pointer = savePointer;
		return false;
	}

	/**
	 * LocalVarDecl --> Type ID
	 * LocalVarDecl --> Type AssignStmt
	 */
	static boolean LocalVarDecl() throws Exception {
		int savePointer = pointer;
		if (nextToken().sym == SymbolTable.TYPE && nextToken().sym == SymbolTable.ID && nextToken().sym == SymbolTable.SEMICOLON) {
			System.out.println("Parsing Token " + tokens.get(pointer).toString() + " :\tLocalVarDecl --> Type ID");
			return true;
		}
		pointer = savePointer;
		if (nextToken().sym == SymbolTable.TYPE && AssignStmt()) {
			System.out.println("Parsing Token " + tokens.get(pointer).toString() + " :\tLocalVarDecl --> Type AssignStmt");
			return true;
		}
		pointer = savePointer;
		return false;
	}

	/**
	 * ReturnStmt --> RETURN Expression
	 */
	static boolean ReturnStmt() throws Exception {
		int savePointer = pointer;
		if (nextToken().sym == SymbolTable.RETURN && Expression() && nextToken().sym == SymbolTable.SEMICOLON) {
			System.out.println("Parsing Token " + tokens.get(pointer).toString() + " :\tReturnStmt --> RETURN Expression");
			return true;
		}
		pointer = savePointer;
		return false;
	}

	/**
	 * ifStmt --> IF (BoolComparison) Statement
	 * ifStmt --> IF (BoolComparison) Statement ELSE Statement
	 */
	static boolean ifStmt() throws Exception {
		int savePointer = pointer;
		if (nextToken().sym == SymbolTable.IF 
		&& nextToken().sym == SymbolTable.LPAREN
		&& BoolComparison()
		&& nextToken().sym == SymbolTable.RPAREN
		&& Statement()
		&& nextToken().sym == SymbolTable.ELSE
		&& Statement()){
			System.out.println("Parsing Token " + tokens.get(pointer).toString() + " :\tifStmt --> IF (BoolComparison) Statement ELSE Statement");
			return true;
		}
		pointer = savePointer;
		if (nextToken().sym == SymbolTable.IF 
		&& nextToken().sym == SymbolTable.LPAREN
		&& BoolComparison()
		&& nextToken().sym == SymbolTable.RPAREN
		&& Statement()){
			System.out.println("Parsing Token " + tokens.get(pointer).toString() + " :\tifStmt --> IF (BoolComparison) Statement");
			return true;
		}
		pointer = savePointer;
		return false;
	}

	/**
	 * BoolComparison --> Expression BooleanExpression Expression
	 */
	static boolean BoolComparison() throws Exception {
		int savePointer = pointer;
		if (Expression() && nextToken().sym == SymbolTable.BooleanExpression && Expression()) {
			System.out.println("Parsing Token " + tokens.get(pointer).toString() + " :\tBoolComparison --> Expression BooleanExpression Expression");
			return true;
		}
		pointer = savePointer;
		return false;
	}

	static Symbol nextToken() {
		if (pointer < tokens.size() - 1) {
			pointer++;
			Symbol token = (Symbol) tokens.get(pointer);
			return token;
		} else
			return null;
	}

}